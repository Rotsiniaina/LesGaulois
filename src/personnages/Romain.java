package personnages;

public class Romain {

	private String nom;
	private int force;
	private Equipement[] equipements = new Equipement[2];
	private int nbEquipement = 0;
	
	public Romain(String nom, int force) {
		this.nom = nom;
		this.force = force;
	}
	
	public String getNom() {
		return nom;
	}
	
	@Override
	public String toString() {
	    return nom;
	}
	
	public void parler(String texte) {
		System.out.println(prendreParole() + "\"" + texte + "\"");
	}
	
	private String prendreParole() {
		return  "Le romain " + nom + " : ";
	}
	
	private boolean isInvariantVerified() {
		return force >= 0;
	}
	
	public void recevoirCoup(int forceCoup) {
		assert forceCoup > 0 : "Erreur : la force du coup doit Ãªtre positive !";
		int ancienneForce = force; // pour la postcondition
		
		force -= forceCoup;
		if (force < 1) {
		force = 0;
		parler("J'abandonne !");
		} else {
		parler("AÃ¯e");
		}
		
		// ðŸ”¹ Postcondition : la force du Romain a diminuÃ© (sauf si elle Ã©tait dÃ©jÃ  Ã  0)
		assert force <= ancienneForce : "Erreur : la force du Romain nâ€™a pas diminuÃ© aprÃ¨s le coup !";

		// ðŸ”¹ VÃ©rification de lâ€™invariant Ã  la fin de la mÃ©thode
		assert isInvariantVerified() : "Erreur : invariant violÃ©, la force est nÃ©gative !";
	}
	
	// MÃ©thode sEquiper
	public void sEquiper(Equipement equipement) {
		switch (nbEquipement) {
		case 2:
			System.out.println("Le soldat " + nom + " est dÃ©jÃ  bien protÃ©gÃ© !");
			break;
		case 1:
			if (equipements[0] == equipement) {
				System.out.println("Le soldat " + nom + " possÃ¨de dÃ©jÃ  un " + equipement + " !");
			} else {
				ajouterEquipement(equipement);
			}
			break;
		case 0:
			ajouterEquipement(equipement);
			break;
		default:
			System.out.println("Erreur inattendue dans le nombre dâ€™Ã©quipements !");
			break;
		}
	}

	// MÃ©thode privÃ©e pour Ã©viter le code dupliquÃ©
	private void ajouterEquipement(Equipement equipement) {
		equipements[nbEquipement] = equipement;
		nbEquipement++;
		System.out.println("Le soldat " + nom + " s'Ã©quipe avec un " + equipement + ".");
	}

	// MAIN pour tester
	public static void main(String[] args) {
		// Test affichage des Ã©numÃ©rÃ©s
		System.out.println(Equipement.CASQUE);
		System.out.println(Equipement.BOUCLIER);
		System.out.println();

		// CrÃ©ation d'un Romain
		Romain minus = new Romain("Minus", 6);

		// Tests de sEquiper
		minus.sEquiper(Equipement.CASQUE);
		minus.sEquiper(Equipement.CASQUE);
		minus.sEquiper(Equipement.BOUCLIER);
		minus.sEquiper(Equipement.CASQUE);
	}
}
